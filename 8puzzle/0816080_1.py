# -*- coding: utf-8 -*-
"""0000000_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1A0MrZqwpIKfWKGrS_Hcd4YDI7dCpKuoD

# Artificial Intelligence - Assignment 1

## 1. Description

In this assignment, you are going to solve the 8-puzzle using any algorithm. The `EightPuzzle` class is written and provided by TAs, you don't need to implement the puzzle yourself, just import and use.

## 2. How to use `EightPuzzle`

```python
from eight_puzzle import EightPuzzle # import

puzzle = EightPuzzle()

puzzle.init()     # initialize a solvable puzzle state
puzzle.init(seed) # initialize a solvable puzzle state using a seed
print(puzzle)     # show current puzzle state

# move
puzzle.move('up')
puzzle.move('down')
puzzle.move('left')
puzzle.move('right')

if puzzle.state == puzzle.FINAL_STATE:
  print('You have solved the puzzle')

# Useful: get the next state after you move in a direction,
# this won't change the internal state of EightPuzzle.
state_after_move_up = puzzle.get_state_after_move(current_state, 'up')

```
"""

# NOTE: PLEASE KEEP THIS CELL NOT MODIFIED!

# download eight_puzzle.py (YOU SHOULD NOT MODIFY eight_puzzle.py)
!wget https://lab.djosix.com/eight_puzzle.py -qO eight_puzzle.py
!sha1sum eight_puzzle.py

from eight_puzzle import EightPuzzle, test

"""## 3. Implement a search algorithm to solve 8-puzzle"""

def solve(p):
    '''Solve the given 8-puzzle and return a list of moves.

    Args:
      puzzle (EightPuzzle): an EightPuzzle object.

    Returns:
      list: a list containing each move direction, for example:
            ['up', 'down', 'left', 'left', ...]
    '''

    
    # YOUR CODE HERE
    
    
    q=list()
    
    explored=dict()
    backtrace=dict()
    start=p.state

    q.append(p.state)
    backtrace[p.state]=None
    explored[p.state]=True
    

    while len(q)>0:
      current_state=q.pop(0)

      if current_state==p.FINAL_STATE:
        break


      for i in p.DIRECTIONS:
        move_state=p.get_state_after_move(current_state,i)

        if move_state== None or move_state in explored.keys() :
          continue
        q.append(move_state)
        explored[move_state]=True
        backtrace[move_state]=(current_state,i)
    
    ans=list()

    while current_state!=start:
      ans.append(backtrace.get(current_state)[1])
      current_state=backtrace.get(current_state)[0]

    ans.reverse()
    return ans

"""## 4. Test your algorithm"""

# NOTE: PLEASE KEEP THIS CELL NOT MODIFIED!

results = test(solve, seed=123, n=10)

"""## 5. Submitting your assignment


1. You have to save 2 files:
  
  - Click "File" > "Download .ipynb" to download `XXXXXXX_1.ipynb`
  - Click "File" > "Download .py" to download `XXXXXXX_1.py`
  
  where `XXXXXXX` is your student ID.  

2. Compress these 2 files into a `.zip` file named `XXXXXXX_1.zip`.

3. Upload the zip file to E3.

> **NOTE: You should click "Runtime" > "Restart and run all" before submitting to E3 to check if your program is able to run without any exception.**
"""